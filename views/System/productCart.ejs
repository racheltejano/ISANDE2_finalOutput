<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="/css/productCartCSS.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>
<body>
    <h1>Shopping Cart</h1>

    <h2><i class='bx bxs-location-plus'></i> Shipping Details</h2>
    <div class="customer-details">
        <input type="text" placeholder="Full Name" value="John Doe">
        <input type="text" placeholder="Address" value="123 Main St, City, Country">
        <input type="text" placeholder="Phone Number" value="+1 234 567 890">
    </div>
    <br />
    <table>
        <h2><i class='bx bxs-package'></i> Products</h2>
        <thead>
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Remove</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <!-- Product rows will be dynamically inserted here -->
        </tbody>
    </table>
    <br />
    <h2><i class='bx bxs-truck' ></i> Shipping</h2>
    <div class="shipping-payment">
        <label for="shipping-method">Shipping Method:</label>
        <select id="shipping-method">
            <option value=" Standard Shipping">Standard Shipping</option>
            <option value="Express Shipping">Express Shipping</option>
            <option value="Next Day Delivery">Next Day Delivery</option>
        </select>
        
    </div>
    <br />
    <h2><i class='bx bxs-credit-card' ></i> Payment Methods</h2>
    <div class="shipping-payment">
        <label for="payment-method">Payment Method:</label>
        <select id="payment-method">
            <option value="Credit Card">Credit Card</option>
            <option value="PayPal">PayPal</option>
            <option value="Bank Transfer">Bank Transfer</option>
        </select>
    </div>
    <br />
    <h2><i class='bx bx-money-withdraw' ></i> Payment Details</h2>
    <div class="totals">
        <div class="totals-item">
            <label>Subtotal:</label>
            <div class="totals-value" id="cart-subtotal">0.00</div>
        </div>
        <div class="totals-item">
            <label>Shipping:</label>
            <div class="totals-value" id="cart-shipping">0.00</div>
        </div>
        <div class="totals-item totals-item-total">
            <label>Grand Total:</label>
            <div class="totals-value" id="cart-total">0.00</div>
        </div>
    </div>

    <button class="checkout">Checkout</button>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        /* Set rates + misc */
        var shippingRate = 49.00; 
        var fadeTime = 300;

        /* Assign actions */
        $(document).on('change', '.product-quantity input', function() {
            updateQuantity(this);
        });

        $(document).on('click', '.product-removal button', function() {
            removeItem(this);
        });

        /* Recalculate cart */
        function recalculateCart() {
            var subtotal = 0;

            /* Sum up row totals */
            $('.product').each(function() {
                subtotal += parseFloat($(this).children('.product-line-price').text());
            });

            /* Calculate totals */
            var shipping = (subtotal > 0 ? shippingRate : 0);
            var total = subtotal + shipping;

            /* Update totals display */
            $('.totals-value').fadeOut(fadeTime, function() {
                $('#cart-subtotal').html(subtotal.toFixed(2));
                $('#cart-shipping').html(shipping.toFixed(2));
                $('#cart-total').html(total.toFixed(2));
                if (total == 0) {
                    $('.checkout').fadeOut(fadeTime);
                } else {
                    $('.checkout').fadeIn(fadeTime);
                }
                $('.totals-value').fadeIn(fadeTime);
            });
        }

        /* Update quantity */
        function updateQuantity(quantityInput) {
            /* Calculate line price */
            var productRow = $(quantityInput).closest('tr');
            var price = parseFloat(productRow.children('.product-price').text());
            var quantity = $(quantityInput).val();
            var linePrice = price * quantity;

            /* Update line price display */
            productRow.children('.product-line-price').html(linePrice.toFixed(2));
            recalculateCart();
        }

        /* Remove item from cart */
        function removeItem(removeButton) {
            var productRow = $(removeButton).closest('tr');
            productRow.fadeOut(fadeTime, function() {
                productRow.remove();
                recalculateCart();
            });
        }

        // Function to show cart contents and fetch product details
        async function showCart() {
            const cartString = sessionStorage.getItem('cart');
            if (cartString) {
                const cart = JSON.parse(cartString);
                console.log('Cart contents:', cart);
                
                // Clear current table body
                $('tbody').empty();

                // Fetch product details for each item in the cart
                for (const item of cart) {
                    try {
                        const response = await fetch(`/customer/product-cart/product/${item.id}`);
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        const product = await response.json();
                        
                        // Create a new row in the table
                        const newRow = `
                            <tr class="product">
                                <td class="product-details">${product.name}</td>
                                <td class="product-price">${product.price.toFixed(2)}</td>
                                <td class="product-quantity">
                                    <input type="number" value ="${item.quantity}" min="1">
                                </td>
                                <td class="product-removal">
                                    <button class="remove-product">Remove</button>
                                </td>
                                <td class="product-line-price">${(product.price * item.quantity).toFixed(2)}</td>
                            </tr>
                        `;
                        $('tbody').append(newRow);
                    } catch (error) {
                        console.error('Error fetching product:', error);
                    }
                }

                // Recalculate the cart totals after rendering products
                recalculateCart();
            } else {
                console.log('No cart found in session storage.');
            }
        }

        // Call showCart on page load or when needed
        $(document).ready(function() {
            showCart();
        });
    </script>
</body>
</html>
